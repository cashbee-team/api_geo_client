=begin
#API Référentiels géographiques

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.5

=end

require 'date'

module ApiGeoClient
  class Commune
    # Code INSEE de la commune
    attr_accessor :code

    # Nom de la commune
    attr_accessor :nom

    # Liste des codes postaux associés à la commune
    attr_accessor :codes_postaux

    # Code du département associé à la commune
    attr_accessor :code_departement

    # Code de la région associée à la commune
    attr_accessor :code_region

    attr_accessor :departement

    attr_accessor :region

    # Population municipale
    attr_accessor :population

    # Surface de la commune, en mètres-carrés
    attr_accessor :surface

    # Centre de la commune (Point GeoJSON)
    attr_accessor :centre

    # Contour de la commune (Polygon GeoJSON)
    attr_accessor :contour

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'nom' => :'nom',
        :'codes_postaux' => :'codesPostaux',
        :'code_departement' => :'codeDepartement',
        :'code_region' => :'codeRegion',
        :'departement' => :'departement',
        :'region' => :'region',
        :'population' => :'population',
        :'surface' => :'surface',
        :'centre' => :'centre',
        :'contour' => :'contour'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'code' => :'String',
        :'nom' => :'String',
        :'codes_postaux' => :'Array<String>',
        :'code_departement' => :'String',
        :'code_region' => :'String',
        :'departement' => :'Departement',
        :'region' => :'Region',
        :'population' => :'Integer',
        :'surface' => :'Float',
        :'centre' => :'Object',
        :'contour' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'nom')
        self.nom = attributes[:'nom']
      end

      if attributes.has_key?(:'codesPostaux')
        if (value = attributes[:'codesPostaux']).is_a?(Array)
          self.codes_postaux = value
        end
      end

      if attributes.has_key?(:'codeDepartement')
        self.code_departement = attributes[:'codeDepartement']
      end

      if attributes.has_key?(:'codeRegion')
        self.code_region = attributes[:'codeRegion']
      end

      if attributes.has_key?(:'departement')
        self.departement = attributes[:'departement']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'population')
        self.population = attributes[:'population']
      end

      if attributes.has_key?(:'surface')
        self.surface = attributes[:'surface']
      end

      if attributes.has_key?(:'centre')
        self.centre = attributes[:'centre']
      end

      if attributes.has_key?(:'contour')
        self.contour = attributes[:'contour']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          nom == o.nom &&
          codes_postaux == o.codes_postaux &&
          code_departement == o.code_departement &&
          code_region == o.code_region &&
          departement == o.departement &&
          region == o.region &&
          population == o.population &&
          surface == o.surface &&
          centre == o.centre &&
          contour == o.contour
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [code, nom, codes_postaux, code_departement, code_region, departement, region, population, surface, centre, contour].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ApiGeoClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
